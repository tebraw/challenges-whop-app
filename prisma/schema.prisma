generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id            String      @id @default(cuid())
  name          String
  createdAt     DateTime    @default(now())
  whopCompanyId String?     @unique
  whopHandle    String?     @unique // e.g., "appmafia"
  whopProductId String?             // e.g., "prod_eDCd1IVJV9gxZ"
  challenges    Challenge[]
  users         User[]
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  name               String?
  role               Role              @default(USER)
  createdAt          DateTime          @default(now())
  tenantId           String
  experienceId       String?           // ðŸŽ¯ WHOP RULE #1: Experience-based scoping
  whopUserId         String?           @unique
  whopAffiliateLink  String?
  whopCompanyId      String?
  isFreeTier         Boolean           @default(true)
  membershipId       String?
  subscriptionStatus String            @default("free")
  tier               String            @default("free")
  createdChallenges  Challenge[]       @relation("Creator")
  winnings           ChallengeWinner[] @relation("Winners")
  enrollments        Enrollment[]
  conversions        OfferConversion[] @relation("UserConversions")
  tenant             Tenant            @relation(fields: [tenantId], references: [id])
  whopProducts       WhopProduct[]     @relation("CreatorProducts")

  @@index([experienceId])
}

model Challenge {
  id                String            @id @default(cuid())
  tenantId          String
  experienceId      String?           // ðŸŽ¯ WHOP RULE #1: Experience-based scoping
  title             String
  description       String?
  startAt           DateTime
  endAt             DateTime
  proofType         ProofType         @default(NONE)
  cadence           Cadence           @default(DAILY)
  rules             Json?
  imageUrl          String?
  createdAt         DateTime          @default(now())
  creatorId         String?
  whopCreatorId     String?
  whopCategoryId    String?
  whopCategoryName  String?
  whopTags          Json?
  monetizationRules Json?
  targetAudience    Json?
  marketingTags     Json?
  category          String?           @default("general")
  difficulty        String?           @default("BEGINNER")
  isPublic          Boolean           @default(true)
  featured          Boolean           @default(false)
  creator           User?             @relation("Creator", fields: [creatorId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id])
  challengeOffers   ChallengeOffer[]
  winners           ChallengeWinner[]
  enrollments       Enrollment[]
  conversions       OfferConversion[] @relation("ChallengeConversions")

  @@index([experienceId])
}

model WhopProduct {
  id              String           @id @default(cuid())
  whopProductId   String           @unique
  name            String
  description     String?
  price           Float
  currency        String           @default("USD")
  productType     String
  imageUrl        String?
  checkoutUrl     String
  isActive        Boolean          @default(true)
  creatorId       String
  whopCreatorId   String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  challengeOffers ChallengeOffer[]
  creator         User             @relation("CreatorProducts", fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([whopCreatorId])
}

model ChallengeOffer {
  id                 String            @id @default(cuid())
  challengeId        String
  whopProductId      String
  offerType          String
  discountPercentage Int?
  discountAmount     Float?
  originalPrice      Float
  discountedPrice    Float
  timeLimit          Int?
  triggerConditions  String?
  customMessage      String?
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  challenge          Challenge         @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  whopProduct        WhopProduct       @relation(fields: [whopProductId], references: [id])
  conversions        OfferConversion[]

  @@index([challengeId])
}

model OfferConversion {
  id               String         @id @default(cuid())
  challengeOfferId String
  userId           String
  challengeId      String
  conversionType   String
  whopCheckoutUrl  String?
  revenue          Float?
  metadata         String?
  createdAt        DateTime       @default(now())
  challenge        Challenge      @relation("ChallengeConversions", fields: [challengeId], references: [id])
  challengeOffer   ChallengeOffer @relation(fields: [challengeOfferId], references: [id], onDelete: Cascade)
  user             User           @relation("UserConversions", fields: [userId], references: [id])

  @@index([challengeId])
  @@index([userId])
}

model Enrollment {
  id          String    @id @default(cuid())
  challengeId String
  userId      String
  joinedAt    DateTime  @default(now())
  checkins    Checkin[]
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  proofs      Proof[]

  @@unique([challengeId, userId])
}

model Proof {
  id           String     @id @default(cuid())
  enrollmentId String
  type         ProofType
  url          String?
  text         String?
  version      Int        @default(1)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([enrollmentId, isActive])
}

model Checkin {
  id           String     @id @default(cuid())
  enrollmentId String
  createdAt    DateTime   @default(now())
  text         String?
  imageUrl     String?
  linkUrl      String?
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model ChallengeWinner {
  id          String    @id @default(cuid())
  challengeId String
  userId      String
  place       Int
  selectedAt  DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation("Winners", fields: [userId], references: [id])

  @@unique([challengeId, place])
  @@unique([challengeId, userId])
  @@index([challengeId])
}

enum Cadence {
  DAILY
  END_OF_CHALLENGE
}

enum Role {
  USER
  ADMIN
}

enum ProofType {
  NONE
  TEXT
  PHOTO
  LINK
}
