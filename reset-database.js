const { PrismaClient } = require('@prisma/client');

async function resetDatabase() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üóëÔ∏è  RESETTING DATABASE - Deleting all data...');
    
    // Delete in correct order (foreign key constraints)
    console.log('   ‚Ä¢ Deleting Enrollments...');
    await prisma.enrollment.deleteMany({});
    
    console.log('   ‚Ä¢ Deleting Challenges...');
    await prisma.challenge.deleteMany({});
    
    console.log('   ‚Ä¢ Deleting Users...');
    await prisma.user.deleteMany({});
    
    console.log('   ‚Ä¢ Deleting Tenants...');
    await prisma.tenant.deleteMany({});
    
    console.log('‚úÖ Database completely reset!');
    
    // Verify empty state
    const userCount = await prisma.user.count();
    const tenantCount = await prisma.tenant.count();
    const challengeCount = await prisma.challenge.count();
    const enrollmentCount = await prisma.enrollment.count();
    
    console.log('\nüìä Final counts:');
    console.log(`   ‚Ä¢ Users: ${userCount}`);
    console.log(`   ‚Ä¢ Tenants: ${tenantCount}`);
    console.log(`   ‚Ä¢ Challenges: ${challengeCount}`);
    console.log(`   ‚Ä¢ Enrollments: ${enrollmentCount}`);
    
    if (userCount === 0 && tenantCount === 0 && challengeCount === 0 && enrollmentCount === 0) {
      console.log('\nüéâ Database is completely clean!');
    } else {
      console.log('\n‚ö†Ô∏è  Some data still remains');
    }
    
  } catch (error) {
    console.error('‚ùå Database reset failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetDatabase();